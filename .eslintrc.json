{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 13,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true,
      "modules": true,
      "experimentalObjectRestSpread": true
    }
  },
  "ignorePatterns": ["**/*", "node_modules"],
  "plugins": ["@nrwl/nx"],
  "settings": {
    "react": {
      "pragma": "React",
      "fragment": "Fragment",
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        // use a glob pattern
        "project": "packages/*/tsconfig.json"
      }
    }
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "eslint:recommended",
        "plugin:@nrwl/nx/typescript",
        "prettier",
        "plugin:prettier/recommended",
        "plugin:jsx-a11y/recommended",
        "plugin:promise/recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:sonarjs/recommended",
        "plugin:unicorn/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:testing-library/react"
      ],
      "plugins": [
        "react",
        "react-hooks",
        "sonarjs",
        "unicorn",
        "@typescript-eslint",
        "prettier",
        "promise",
        "import",
        "simple-import-sort"
      ],
      "rules": {
        "prettier/prettier": "error",
        "react/prop-types": "off",
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              // Builtins
              [
                "^(events|fs|buffer|assert|child_process|cluster|dgram|dns|domain|crypto|http|https|module|net|console|constants|os|path|punycode|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty)(/.*|$)"
              ],
              // React, Apollo, Other @**, Styled Components
              ["^react", "^@apollo", "^@?\\w", "^styled"],
              // Monorepo packages
              ["^(@nx-ts-vite-react-graphql-styled-monorepo-example)(/.*|$)"],
              // Types
              ["^.+?[Tt]ype.+?"],
              // Hooks
              ["^.*use[A-Z].*$"],
              // Side effect imports.
              ["^\\u0000"],
              // Parent imports
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Relative imports
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              // Style
              ["^.*styled.index$", "^.*css$"],
              // Icons
              ["^.*svg$"]
            ]
          }
        ],
        "simple-import-sort/exports": "error",
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error",
        "import/prefer-default-export": "off",
        "import/no-anonymous-default-export": [
          "error",
          {
            "allowArray": false,
            "allowArrowFunction": false,
            "allowAnonymousClass": false,
            "allowAnonymousFunction": false,
            "allowCallExpression": true,
            "allowLiteral": false,
            "allowObject": true
          }
        ],
        "unicorn/prefer-module": "off",
        "unicorn/no-empty-file": "off",
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "pascalCase": true,
              "camelCase": true
            },
            "ignore": [
              "vite(st)?.config.ts",
              "vite-environment.d.ts",
              "\\.spec.ts(x)?",
              "\\.types.ts(x)?",
              "\\.stories.ts(x)?",
              "\\.styled.ts(x)?"
            ]
          }
        ],
        "padding-line-between-statements": [
          "error",
          { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*" },
          { "blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"] },
          { "blankLine": "always", "prev": "*", "next": "return" }
        ],
        "no-multiple-empty-lines": ["error"],
        "arrow-body-style": "off",
        "prefer-arrow-callback": "off",
        "no-console": ["error", { "allow": ["warn", "info", "error"] }],
        "@typescript-eslint/no-use-before-define": ["error"],
        "@typescript-eslint/no-unused-vars": [
          "error"
        ],
        "promise/prefer-await-to-then": "error",
        "react/react-in-jsx-scope": "off",
        "no-underscore-dangle": [
          "error",
          {
            "allow": ["_id", "__typename", "__schema", "__dirname"],
            "allowAfterThis": true
          }
        ]
      }
    }
  ],
  "env": {
    "es6": true,
    "browser": true,
    "node": true
  }
}
